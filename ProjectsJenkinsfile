#!/bin/env groovy

def cleanCheckout (repo_url) {
    checkout poll: false, scm: [$class: 'GitSCM', branches: [[name:
        '*/master']], extensions: [[$class: 'CleanBeforeCheckout']],
        userRemoteConfigs: [[url: repo_url]]]
}

////////////////////////////////////////////////////////////////////////////////

def projects = [ "s-ludwig/taggedalgebraic", "repeatedly/mustache-d" ]

stage('Get compiler') {
    node {
        // Requires CopyArtifact plugin
        step ([$class: 'CopyArtifact',
            projectName: 'dlangci-main',
            selector: [$class: 'TriggeredBuildSelector']])
        sh "tar -xf distribution.tar"
    }
}

stage('Clone') {
    def repos = [:]

    for (int i = 0; i < projects.size(); ++i) {
        def proj = projects[i]; // http://stackoverflow.com/a/35776133
        repos["$proj"] = {
            dir("$proj") {
                cleanCheckout "https://github.com/${proj}.git"
            }
        }
    }

    node {
        parallel repos
    }
}

stage('Build') {
    def repos = [:]

    for (int i = 0; i < projects.size(); ++i) {
        def proj = projects[i]; // http://stackoverflow.com/a/35776133
        repos["$proj"] = {
            dir("$proj") {
                withEnv(["PATH=${env.WORKSPACE}/distribution/bin:${env.PATH}"]) {
                    sh "dub build"
                }
            }
        }
    }

    node {
        parallel repos
    }
}

stage('Test') {
    def repos = [:]

    for (int i = 0; i < projects.size(); ++i) {
        def proj = projects[i]; // http://stackoverflow.com/a/35776133
        repos["$proj"] = {
            dir("$proj") {
                withEnv(["PATH=${env.WORKSPACE}/distribution/bin:${env.PATH}"]) {
                    sh "dub test"
                }
            }
        }
    }

    node {
        parallel repos
    }
}
