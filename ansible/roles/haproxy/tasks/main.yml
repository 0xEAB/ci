---
# setup haproxy and letsencrypt certificates
- name: add haproxy-1.8 repo
  apt_repository: { repo: 'ppa:vbernat/haproxy-1.8', update_cache: yes }
- name: install haproxy
  apt: { name: haproxy=1.8.*, install_recommends: no, update_cache: yes, cache_valid_time: 3600 }

- name: configure http frontend
  blockinfile:
    dest: /etc/haproxy/haproxy.cfg
    marker: "# {mark} http"
    block: |
      frontend http
              mode http
              bind :::80
              acl acme path_beg /.well-known/acme-challenge/
              redirect scheme https code 301 if !acme
              use_backend acme if acme
      backend acme # for renewing letencrypt challenges
              server s1 127.0.0.1:23878
  when: ansible_virtualization_type != 'virtualbox'
  notify: restart haproxy

- meta: flush_handlers

- name: allow http and https on firewall
  ufw: { rule: allow, port: "{{ item }}", proto: tcp }
  with_items: [http, https]

- include: obtain_cert.yml
  vars:
    email: webmaster@dawg.eu
    domains: "{{ backends }}"
    http_challenge_port: 23878
    reload_cmd: systemctl reload haproxy
  when: ansible_virtualization_type != 'virtualbox'

- name: configure haproxy
  lineinfile:
    dest: /etc/haproxy/haproxy.cfg
    regexp: "{{ item.key | replace('.', '\\.') }}"
    insertafter: 'ssl-default-bind-options'
    line: "	{{ item.key }} {{ item.value }}"
  with_dict:
    # https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
    ssl-default-bind-ciphers: ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
    ssl-default-bind-options: no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
    ssl-default-server-ciphers: ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
    ssl-default-server-options: no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
  notify: restart haproxy
- name: configure haproxy
  lineinfile:
    dest: /etc/haproxy/haproxy.cfg
    regexp: tune\.ssl.default-dh-param
    state: absent
  notify: restart haproxy
- name: configure haproxy
  blockinfile:
    dest: /etc/haproxy/haproxy.cfg
    marker: "# {mark} https"
    block: |
      frontend https
              mode http
              bind :::443 ssl {%- for domain in backends.keys() %} crt /etc/ssl/private/{{ domain }}.pem{%- endfor %} alpn h2,http/1.1

              http-request set-header X-Forwarded-Proto https
              http-response set-header Strict-Transport-Security max-age=31536000
              {% for domain in backends.keys() -%}
              use_backend {{ domain }} if { ssl_fc_sni -i {{ domain }} }
              {% endfor %}

      {% for domain, backend in backends.iteritems() -%}
      backend {{ domain }}
              {{ backend | indent(8) }}
      {% endfor %}
  when: ansible_virtualization_type != 'virtualbox'
  notify: restart haproxy

- blockinfile:
    dest: /etc/haproxy/haproxy.cfg
    block: |
      frontend http
              mode http
              bind :::80
              use_backend jenkins
      backend jenkins
              server s1 127.0.0.1:9000
  when: ansible_virtualization_type == 'virtualbox'
  notify: restart haproxy
