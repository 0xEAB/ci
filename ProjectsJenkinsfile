#!/bin/env groovy

/*******************************************************************************

    Utilities and helpers

*******************************************************************************/

/**
    Checks out latest SemVer-compatible tag available in specified repo
 **/
def cleanCheckout (repo_url) {
    git poll: false, branch: "master",
        extensions: [[$class: 'CleanBeforeCheckout']], url: repo_url

    def LATEST = sh (
        script: 'git tag -l | egrep "^v[0-9]+\\.[0-9]+\\.[0-9]+.*$" | sort --version-sort | tail -n 1',
        returnStdout: true
    ).trim()

    sh "git checkout ${LATEST}"
}

/**
    Utility to simplify repeating boilerplate of defining parallel steps
    over array of folders. Creates a map from @names array where each value
    is @action called with each name respectively while being wrapped in
    `dir(name)` statement.
 **/
def mapSteps (names, action) {
    def steps = [:]

    for (int i = 0; i < names.size(); ++i) {
        def name = names[i];
        steps[name] = { dir(name, { action(name) }) }
    }

    return steps
}

/*******************************************************************************

    Actions

    In Groovy it is not possible to define a "static" nested function and
    defining a closure wrongly captures a context, making it break `parallel`
    in weird ways.

    Because of that, all actions to be used with `mapSteps` are to be define
    here as global functions. Each function should be named in relation to stage
    is used in and take exactly one argument - directory name

*******************************************************************************/

def clone (name) {
    cleanCheckout "https://github.com/${name}.git"
}

/*******************************************************************************

    Stages

*******************************************************************************/

def dub_projects = [
   "Abscissa/libInputVisitor",
   "BlackEdder/ggplotd",
   "DerelictOrg/DerelictFT",
   "DerelictOrg/DerelictGL3",
   "DerelictOrg/DerelictGLFW3",
   "DerelictOrg/DerelictSDL2",
   "DlangScience/scid",
   "Hackerpilot/libdparse",
   "ariovistus/pyd",
   "atilaneves/unit-threaded",
   "d-gamedev-team/gfm",
   "dlang/dub",
   "economicmodeling/containers",
   "higgsjs/Higgs",
   "kyllingstad/zmqd",
   "lgvz/imageformats",
   "msgpack/msgpack-d",
   "msoucy/dproto",
   "nomad-software/dunit",
   "rejectedsoftware/diet-ng",
   "rejectedsoftware/vibe.d",
   "repeatedly/mustache-d",
   "s-ludwig/taggedalgebraic",
]

node { // for now whole pipeline runs on one node because no slaves are present

    unstash name: "dlang-build"

    stage('Test Projects') {
        parallel mapSteps(dub_projects, { name ->
            clone(name)
            withEnv(["PATH=${env.WORKSPACE}/distribution/bin:${env.PATH}"]) {
                sh "dub test"
            }
        })
    }
}
