---
- name: install java
  apt: { name: default-jre-headless, install_recommends: no, update_cache: yes, cache_valid_time: 3600 }
- name: add jenkins slave user
  user: { name: jenkins, system: yes, home: /var/lib/jenkins }
# see https://wiki.jenkins.io/display/JENKINS/Remote+access+API#RemoteaccessAPI-CSRFProtection
# and https://support.cloudbees.com/hc/en-us/articles/222520647-How-to-find-slave-secret-key
- name: get CSRF token
  uri:
    url: "{{ jenkins_url }}crumbIssuer/api/json"
    user: "{{ jenkins_admin_username }}"
    password: "{{ jenkins_admin_password }}"
    force_basic_auth: yes
    method: GET
  register: csrf_token
  check_mode: no
- set_fact:
    script: |-
      import hudson.slaves.DumbSlave
      import hudson.slaves.JNLPLauncher
      import hudson.slaves.RetentionStrategy
      import jenkins.model.Jenkins
      import org.jenkinsci.plugins.slave_setup.SetupSlaveLauncher

      def slave = Jenkins.instance.slaves.find { it.name == '{{ inventory_hostname }}' }
      if (slave == null)
          slave = new DumbSlave("{{ inventory_hostname }}", '/var/lib/jenkins', null)
      {% if host_start_cmd is defined %}
      def launcher = new SetupSlaveLauncher(new JNLPLauncher(true), '''{{ host_start_cmd }}''', '''{{ host_stop_cmd }}''')
      def retention = new RetentionStrategy.Demand(3, 0);
      {% else %}
      def launcher = new JNLPLauncher(true)
      def retention = new RetentionStrategy.Always();
      {% endif %}
      slave = new DumbSlave("{{ inventory_hostname }}", '/var/lib/jenkins', launcher)
      slave.setNumExecutors({{ jenkins_num_executors }})
      slave.setLauncher(launcher)
      slave.setRetentionStrategy(retention)
      Jenkins.instance.addNode(slave)
- debug: msg="{{ script }}"
- name: add slave
  uri:
    url: "{{ jenkins_url }}scriptText"
    user: "{{ jenkins_admin_username }}"
    password: "{{ jenkins_admin_password }}"
    force_basic_auth: yes
    method: POST
    body: >-
      {{ csrf_token.json.crumbRequestField }}={{ csrf_token.json.crumb }}&script={{ script | urlencode() }}
    return_content: yes
  register: response
  # endpoint only knows 200 OK :(
  failed_when: "'Exception' in response.content"
  changed_when: "'ADDED' in response.content"
- set_fact:
    script: |-
      import jenkins.model.Jenkins
      def slave = Jenkins.instance.slaves.find { it.name == '{{ inventory_hostname }}' }
      println(slave.computer.jnlpMac)
- name: get slave secret
  uri:
    url: "{{ jenkins_url }}scriptText"
    user: "{{ jenkins_admin_username }}"
    password: "{{ jenkins_admin_password }}"
    force_basic_auth: yes
    method: POST
    body: >-
      {{ csrf_token.json.crumbRequestField }}={{ csrf_token.json.crumb }}&script={{ script | urlencode() }}
    return_content: yes
  check_mode: no
  register: response
  # endpoint only knows 200 OK :(
  failed_when: "'Exception' in response.content"
  ignore_errors: ansible_check_mode
- set_fact:
    secret: "{{ response.content | trim }}"
# https://github.com/jenkinsci/remoting/blob/ac60160b459bad1802e250de8749a2dbb21e87ad/docs/workDir.md
- name: remove old slave caches
  file: { dest: /var/lib/jenkins/.jenkins, state: absent }
- name: remove old slave.jar
  file: { dest: /var/lib/jenkins/slave.jar, state: absent }
- name: add jenkins slave service
  template: { src: jenkins.service.j2, dest: /etc/systemd/system/jenkins.service }
  vars:
    secret: secret.content
  notify: [systemctl daemon-reload, restart jenkins]
- name: enable jenkins slave
  service: { name: jenkins, state: started, enabled: yes }
